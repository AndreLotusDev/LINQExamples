Join - refactoring challenge
Refactor the GetHousesData method using LINQ.

using System;
using System.Linq;
using System.Collections.Generic;


namespace Coding.Exercise
{
    public class Exercise
    {
        //TODO implement this method
        public static Dictionary<House, Person> GetHousesData_Refactored(
            IEnumerable<Person> people,
            IEnumerable<House> houses)
        {
            return houses.Join(people, h => h.OwnerId, p => p.Id, (h, p) => new { House = h, Owner = p })
                 .ToDictionary(hp => hp.House, hp => hp.Owner);
        }

        //do not modify this method
        public static Dictionary<House, Person> GetHousesData(
            IEnumerable<Person> people,
            IEnumerable<House> houses)
        {
            var result = new Dictionary<House, Person>();
            foreach(var house in houses)
            {
                foreach(var owner in people)
                {
                    if(owner.Id == house.OwnerId)
                    {
                        result[house] = owner;
                    }
                }
            }
            return result;
        }
    }
    
      public class House
    {
        public int OwnerId { get; }
        public string Adderss { get; }

        public House(int ownerId, string adderss)
        {
            OwnerId = ownerId;
            Adderss = adderss;
        }
        
        public override string ToString()
        {
            return $"{Adderss}";
        }
    }
    public class Person 
    {
        public int Id { get;}
        public string Name {get;}

        public Person(int id, string name)
        {
            Id = id;
            Name = name;
        }

        public override string ToString()
        {
            return $"{Name}";
        }
    }
}
