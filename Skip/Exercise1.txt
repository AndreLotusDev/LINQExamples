Skip - coding exercise 1
Let's define a Student class. A student has a collection of Marks, which are numbers. Implement the CalculateAverageMark method, which will calculate the average mark for a student, but it will ignore the lowest and the highest mark. Let's assume a student with less than 3 marks has an average mark of 0.

For example:

John has the following marks: 3,4,6,6,2,5. We want to ignore one highest mark (6) and one lowest mark (2). That means, we want to calculate the average of 3,4,6,5, which is 4.5

Assume the marks of the student are not null.

using System;
using System.Collections.Generic;
using System.Linq;

namespace Coding.Exercise
{
    public class Exercise
    {
        public static double CalculateAverageMark(Student student)
        {
            if (student.Marks == null)
            {
                return 0;
            }
        
            if (student.Marks.Any() == false)
            {
                return 0;
            }
        
            if (student.Marks.Count() < 3)
            {
                return 0;
            }
        
            return student.Marks.OrderBy(o => o).Skip(1).OrderByDescending(o => o).Skip(1).Average();
        }
    }
    
    public class Student
    {
        public IEnumerable<int> Marks {get; set;}
    }
    
    //feel free to ignore this method
    //it is added because Udemy uses .NET Core 1
    //and SkipLast is available since .NET Core 2
    //so I just added this method so we can use SkipLast
    public static class EnumerableExtension
    {
        public static IEnumerable<T> SkipLast<T>(this IEnumerable<T> source, int count)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));

            if (count == 0)
            {
                return source;
            }

            var toTake = source.Count() - count;
            return source.Take(toTake);
        }
    }
}
